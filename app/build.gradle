apply plugin: 'com.android.application'

android {
    /**
     * 设置编译 sdk 和编译工具的版本
     */
    compileSdkVersion 19
    buildToolsVersion "24.0.3"

    /**
     * 为所有的 build variants 设置默认的值. 关于 build variant, 我们后面会用一张图片说明
     */
    defaultConfig {
        applicationId "com.dingxiaoyu.iweather"
        minSdkVersion 19
        targetSdkVersion 19
        versionCode 13
        versionName "1.1.1"
        //testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    /**
     * 关于签名, 请参考 google 官方文档:
     * <a href="https://developer.android.com/studio/publish/app-signing.html#debug-mode">Sign Your App</a>
     */
    signingConfigs {
        /**
         * As 会自动帮我们使用 debug certificate 进行签名. 这个 debug certificate 每次安装 As 都会变,
         * 因此不适合作为发布之用.
         */
        debug {
        }

        release {
            storeFile file(STORE_FILE)
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
    }
    /**
     * type 默认会有 debug 和 release. 不管你写不写都如此.
     * 通常, 我们在 debug 中保留默认值, release 中开启混淆, 并使用私有的签名
     */
    buildTypes {
        release {
            // 混淆
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            // 签名
            signingConfig signingConfigs.release
        }

        debug {
        }
    }

    /**
     * flavor 强调的是不同的版本, 比如付费版和免费版.
     * 在国内, 这个字段更多被用于区分不同的渠道, 即 360 渠道, 小米渠道等等.
     */
    productFlavors {
        main {
            // 定制包名的
            //applicationId "com.dingxiaoyu.iweather"
            // manifests
            //manifestPlaceholders = [ CHANNEL_NAME:"YINGYONGBAO"]
        }
        flyme {
        }
    }

    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets']
            jniLibs.srcDirs = ['libs']
            resources.srcDirs = ['src/main/res']
            res.srcDirs = ['src/main/res']
        }
        flyme {
            assets.srcDirs = ['src/main/assets']
            jniLibs.srcDirs = ['libs']
        }
    }

    /**
     * 这个选项基本不用.
     * <a href="http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits">官方说</a>: 使用 splits 可以比使用 flavor 更加有效创建多 apk.
     * 目前而言, 仅支持 Density 和 ABIs 这两个分类.
     */
    splits {
        // 按屏幕尺寸
        density {
            enable false

            // 默认包含全部分辨率, 这里是剔除一些我们不要的
            exclude "ldpi", "mdpi", "xxxhdpi", "400dpi", "560dpi", "tvdpi"
        }

        // 按架构
        abi {
            enable false

            // 使用 `reset()` 后, 我们就相当于不包含任何架构,
            // 这种情况下我们就可以通过 `include` 指定想要使用的架构
            reset()

            include 'x86', 'armeabi-v7a'
            universalApk true       // 是否同时生成一个包含全部 Architecture 的包
        }
    }
}

/**
 * 配置依赖目录
 */
repositories {
    flatDir {
        dirs 'libs'
    }
}

/**
 * 项目的依赖
 */
dependencies {
    /**
     * `fileTree` 导入 libs 目录下的所有 jar 文件
     */
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-v4:24.2.1'
    compile 'com.android.volley:volley:1.0.0'
    compile 'com.squareup.okhttp:okhttp:2.1.0'
    compile 'com.alibaba:fastjson:1.2.18'
    // flyme 推送
    compile(name: 'common-1.0.10', ext: 'aar')
    compile(name: 'gslb-3.0.9', ext: 'aar')
    compile(name: 'push-internal-3.1.160901', ext: 'aar')
    compile(name: 'usage-stats-2.5.1', ext: 'aar')
    //testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile files('libs/Baidu_Mtj_3.7.4.9.jar')
}
